name: Terraform Apply

on:
  push:
    branches:
      - main      # prod環境に自動適用
      - develop   # dev環境に自動適用
    paths:
      - 'terraform/**'
  workflow_dispatch:  # 手動実行も可能
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

# OIDCトークンの取得を許可
permissions:
  id-token: write   # OIDCトークン取得に必要
  contents: read    # リポジトリの読み取り

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手動実行の場合は入力値を使用
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # mainブランチはprod環境
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            # developブランチはdev環境
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            # その他のブランチはdev環境（フォールバック）
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  apply:
    name: Terraform Apply (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}  # 環境ごとの承認設定が可能

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Terraform Init
        working-directory: terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform init

      - name: Terraform Format Check
        working-directory: terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform fmt -check -recursive || echo "⚠️ Terraform files need formatting"

      - name: Terraform Validate
        working-directory: terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform/environments/${{ needs.determine-environment.outputs.environment }}
        run: terraform apply -auto-approve tfplan

      - name: Apply summary
        if: success()
        run: |
          echo "✅ Terraform apply completed successfully!"
          echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "Infrastructure has been updated"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Terraform apply failed!"
          echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "Check the logs above for details"

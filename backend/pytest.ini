# pytest設定ファイル
# バックエンドテストの実行設定とカバレッジ測定の定義

[pytest]
# テストディレクトリの指定
testpaths = tests

# テストファイルのパターン
python_files = test_*.py

# テストクラスのパターン
python_classes = Test*

# テスト関数のパターン
python_functions = test_*

# 詳細な出力設定
addopts =
    # 詳細なテスト結果表示
    -v
    # テストの実行時間を表示
    --durations=10
    # テストカバレッジを測定
    --cov=app
    # カバレッジレポートをターミナルに表示
    --cov-report=term-missing
    # カバレッジレポートをHTMLで生成
    --cov-report=html:htmlcov
    # カバレッジの最低基準（80%）- これを下回るとテスト失敗
    --cov-fail-under=80
    # 警告を表示
    --tb=short
    # 失敗したテストで即座に停止しない（全テストを実行）
    --maxfail=5
    # strictモード（警告をエラーとして扱う）
    --strict-markers

# カスタムマーカーの定義（テストの分類用）
markers =
    unit: 単体テスト（外部依存なし）
    integration: 統合テスト（AWS等の外部サービスをモック）
    slow: 実行時間が長いテスト
    security: セキュリティ関連のテスト（XSS、インジェクション等）
    validation: バリデーションテスト

# テストカバレッジから除外するパターン
[coverage:run]
omit =
    */tests/*
    */conftest.py
    */__init__.py
    */venv/*
    */.venv/*

# カバレッジレポートの設定
[coverage:report]
# カバレッジが低いファイルをスキップしない
skip_empty = False
# 精度（小数点以下2桁）
precision = 2
# 表示から除外する行のパターン
exclude_lines =
    # pragmaコメント
    pragma: no cover
    # 抽象メソッド
    @abstract
    # NotImplementedError
    raise NotImplementedError
    # if __name__ == '__main__'
    if __name__ == .__main__.:
    # 型チェック専用のコード
    if TYPE_CHECKING:
    # デバッグ用コード
    if DEBUG:
